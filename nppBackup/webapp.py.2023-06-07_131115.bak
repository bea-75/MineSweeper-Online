from flask import Flask, redirect, url_for, session, request, jsonify, render_template, Markup
from flask import flash
from flask_apscheduler import APScheduler
from apscheduler.schedulers.background import BackgroundScheduler
from flask_oauthlib.client import OAuth
from bson.objectid import ObjectId
from datetime import timedelta

import time
import random
import pprint
import os
import time
import pymongo
import sys
 
app = Flask(__name__)
app.debug = True

#initialize scheduler with your preferred timezone
scheduler = BackgroundScheduler({'apscheduler.timezone': 'America/Los_Angeles'})
scheduler.start()
 
app.secret_key = os.environ['SECRET_KEY'] #used to sign session cookies
oauth = OAuth(app)
oauth.init_app(app) #initialize the app to be able to make requests for user information

#Set up GitHub as OAuth provider
github = oauth.remote_app(
    'github',
    consumer_key=os.environ['GITHUB_CLIENT_ID'], #your web app's "username" for github's OAuth
    consumer_secret=os.environ['GITHUB_CLIENT_SECRET'],#your web app's "password" for github's OAuth
    request_token_params={'scope': 'user:email'}, #request read-only access to the user's email.  For a list of possible scopes, see developer.github.com/apps/building-oauth-apps/scopes-for-oauth-apps
    base_url='https://api.github.com/',
    request_token_url=None,
    access_token_method='POST',
    access_token_url='https://github.com/login/oauth/access_token',  
    authorize_url='https://github.com/login/oauth/authorize' #URL for github's OAuth login
)

#Connect to database
url = os.environ["MONGO_CONNECTION_STRING"]
client = pymongo.MongoClient(url)
db = client[os.environ["MONGO_DBNAME"]]
collection = db['Profiles'] #TODO: put the name of the collection here

print("connected to db")

y = 0 #tracking length of layer
x = 0 #tracking length of bombLayout

game_end = False

layer = []

bombLayout = []
bombLayout.clear()

flagNum = 0

start_time = 0

@app.route("/game-restart")
def gameRestart():
    global flagNum
    global bombLayout
    global time
    global start_time
    #bombLayout = []
    start_time = 0
    flagNum = 0
    return redirect('/game')

def how_many(layers):
    count = 0
    for num in layers:
        if num == -1:
            count += 1
    if count >= random.randrange(1,3):
        return "more"
    else:
        return "less"

def generate_bomb_layout():
    global x
    global y
    global bombLayout
    
    while x < 13:
        while y < 10:
            if layer == []:
                layer.append(0)
                y += 1
            else:
                counts = how_many(layer)
                if layer[-1] == -1:
                    layer.append(0)
                    y += 1
                elif counts == "more":
                    layer.append(0)
                    y += 1
                else:
                    layer.append(random.randrange(-1,1))
                    y += 1
        else:
            copy = layer.copy()
            bombLayout.append(copy)
            y = 0
            layer.clear()
        x += 1
    return bombLayout

#bombLayout = [[0, 0, 0, -1, 0, 0, -1], 
#            [-1, 0, -1, 0, 0, 0, 0], 
#            [-1, 0, 0, -1, 0, 0, 0], 
#            [0, 1, 0, -1, 0, 0, 0], 
#            [-1, 0, 0, -1, 0, 0, 0], 
#            [-1, 0, 0, 0, -1, 0, 0], 
#            [0, 0, -1, 0, -1, 0, 0], 
#            [-1, 0, 0, 0, -1, 0, 0]]    
            
numLayout = []

gameHtml = ""

#context processors run before templates are rendered and add variable(s) to the template's context
#context processors must return a dictionary 
#this context processor adds the variable logged_in to the conext for all templates
@app.context_processor
def inject_logged_in():
    return {"logged_in":('github_token' in session)}

def create_layout(numLayout):
    global gameHtml
    for x in range(len(numLayout)):
        if bombLayout[x] == bombLayout.index(bombLayout[0]):
            gameHtml = gameHtml + Markup('<span>\n')
        else:
            gameHtml = gameHtml + Markup('</span>\n<br>\n<span>\n')
        for y in range(len(numLayout[x])):
            if numLayout[x][y] == -1:
                gameHtml = gameHtml + Markup('<button type="button" class="btn-lg btn-success block bomb"><b>b</b></button>\n')
            elif numLayout[x][y] == 0:
                gameHtml = gameHtml + Markup('<button type="button" class="btn-lg btn-success block 0"><b>..</b></button>\n')
            else:
                gameHtml = gameHtml + Markup('<button type="button" class="btn-lg btn-success block"><b>' + str(numLayout[x][y]) + '</b></button>\n')
                
    gameHtml = gameHtml + Markup('</span>\n<br>\n')
    return gameHtml
    
def generate_numbers():
    for x in range(len(numLayout)):
        for y in range(len(numLayout[x])):
            if numLayout[x][y] == -1:
                if numLayout[x] == numLayout.index(numLayout[0]):
                    if (y-1) < len(numLayout[x]):
                        if numLayout[x][y - 1] != -1: #left of bomb
                            numLayout[x][y - 1] += 1
                            
                    if (y+1) < len(numLayout[x]):
                        if numLayout[x][y + 1] != -1: #right of bomb
                            numLayout[x][y + 1] += 1
                    
                    if (x+1) < len(numLayout):
                        if numLayout[x + 1][y] != -1: #directly under bomb
                            numLayout[x + 1][y] += 1
                                        
                    if (x+1) < len(numLayout) and (y-1) >= 0:
                        if numLayout[x + 1][y - 1] != -1: #under, left bomb
                            numLayout[x + 1][y - 1] += 1
                                        
                    if (x+1) < len(numLayout) and (y+1) < len(numLayout[x]):    
                        if numLayout[x + 1][y + 1] != -1: #under, right bomb
                            numLayout[x + 1][y + 1] += 1
                #---------------------------------------------------------------------
                
                if numLayout[x] == numLayout.index(numLayout[7]):
                    if (y-1) >= 0:
                        if numLayout[x][y - 1] != -1: #left of bomb
                            numLayout[x][y - 1] += 1
                            
                    if (y+1) < len(numLayout[x]):
                        if numLayout[x][y + 1] != -1: #right of bomb
                            numLayout[x][y + 1] += 1
                            
                    if (x-1) < len(numLayout):
                        if numLayout[x - 1][y] != -1: #directly above bomb
                                numLayout[x - 1][y] += 1
                        
                    if (x-1) < len(numLayout) and (y-1) >= 0:
                        if numLayout[x - 1][y - 1] != -1: #above, left bomb
                            numLayout[x - 1][y - 1] += 1
                                        
                    if (x-1) < len(numLayout) and (y+1) < len(numLayout[x]):
                        if numLayout[x - 1][y + 1] != -1: #above, right bomb
                            numLayout[x - 1][y + 1] += 1
                #---------------------------------------------------------------------
                
                if numLayout[x] != numLayout[0] and numLayout[x] != numLayout[7]:
                    if (y-1) >= 0:
                        if numLayout[x][y - 1] != -1: #left of bomb
                            numLayout[x][y - 1] += 1
                            
                    if (y+1) < len(numLayout[x]):
                        if numLayout[x][y + 1] != -1: #right of bomb
                            numLayout[x][y + 1] += 1
                        
                    if (x-1) < len(numLayout):
                        if numLayout[x - 1][y] != -1: #directly above bomb
                                numLayout[x - 1][y] += 1
                        
                    if (x-1) < len(numLayout) and (y-1) >= 0:
                        if numLayout[x - 1][y - 1] != -1: #above, left bomb
                            numLayout[x - 1][y - 1] += 1
                                        
                    if (x-1) < len(numLayout) and (y+1) < len(numLayout[x]):
                        if numLayout[x - 1][y + 1] != -1: #above, right bomb
                            numLayout[x - 1][y + 1] += 1
                                    
                    if (x+1) < len(numLayout):
                        if numLayout[x + 1][y] != -1: #directly under bomb
                            numLayout[x + 1][y] += 1
                                        
                    if (x+1) < len(numLayout) and (y-1) >= 0:
                        if numLayout[x + 1][y - 1] != -1: #under, left bomb
                            numLayout[x + 1][y - 1] += 1
                                        
                    if (x+1) < len(numLayout) and (y+1) < len(numLayout[x]):    
                        if numLayout[x + 1][y + 1] != -1: #under, right bomb
                            numLayout[x + 1][y + 1] += 1
    return numLayout

@app.route('/flag')
def flagHTML():
    flag = "<h3>&#128681;</h3>"
    return flag
    
@app.route('/unflag')
def unflagHTML():
    unflag = "<b>..</b>"
    return unflag
    
@app.route('/bomb')
def bombHTML():
    bomb = "<h3>&#128163;</h3>"
    return bomb
    
@app.route('/unflag_bomb')
def unflagBombHTML():
    unflag = "<b>b</b>"
    return unflag

@app.route('/')
def home():
    #print(generate_numbers())
    return render_template('home.html')
    
@app.route('/game_end_lose')
def gameEndLose():
    global start_time
    global game_end
    global time
    game_end = True
    end_time = time.time()
    timer = round(end_time - start_time)
    time_taken = str(timedelta(seconds=timer))
    if 'user_data' in session:
        user = session['user_data']['login']
        collection.update_one({"User":user},
        {
            "$set": {
                {"Loses": "Loses" + 1}
            }
        })
        
        for doc in collection.find({"User": user}):
                btime = doc["Best Time"]
                time_sec = doc["Best Time Seconds"]
        
        end = '<div>\n<h2> Game Over! </h2>\n<h3>Time Taken: '+str(time_taken)+'</h3>\n<h3>Best Time: '+btime+'</h3>\n<button class = "btn btn-success btn-lg end"><b>Play Again</b></button></div>'
    else:   
        end = '<div>\n<h2> Game Over! </h2>\n<h3>Time Taken: '+str(time_taken)+'</h3>\n<button class = "btn btn-success btn-lg end"><b>Play Again</b></button></div>'
        
    return end
    
@app.route('/game_end_win')
def gameEndWin():
    global game_end
    global start_time
    global flagNum
    game_end = True
    end_time = time.time()
    timer = round(end_time - start_time)
    time_taken = str(timedelta(seconds=timer))
    
    if flagNum == 0:
        if 'user_data' in session:
            user = session['user_data']['login']
            collection.update_one({"User":user},
            {
                "$set": {
                    {"Wins": "Wins" + 1}
                }
            })
            
            for doc in collection.find({"User": user}):
                btime = doc["Best Time"]
                time_sec = doc["Best Time Seconds"]
        
            if time_sec > timer:
                collection.update_one({"User":user},
                {
                    "$set": {
                        {"Best Time": time_taken}
                    }
                })
                end = '<div>\n<h2> You Win! </h2>\n<h3>Time Taken: '+str(time_taken)+'</h3>\n<h4>New Best Time!</h4>\n<form action = "/game-restart">\n<button class = "btn btn-success btn-lg end"><b>Play Again</b></button>\n</form></div>'
            else:
                end = '<div>\n<h2> You Win! </h2>\n<h3>Time Taken: '+str(time_taken)+'</h3>\n<h3>Best Time: '+btime+'</h3>\n<form action = "/game-restart">\n<button class = "btn btn-success btn-lg end"><b>Play Again</b></button>\n</form></div>'
        else:
            end = '<div>\n<h2> Game Over! </h2>\n<h3>Time Taken: '+str(time_taken)+'</h3>\n<form action = "/game-restart">\n<button class = "btn btn-success btn-lg end"><b>Play Again</b></button>\n</form></div>'
    else: 
        if 'user_data' in session:
            user = session['user_data']['login']
            collection.update_one({"User":user},
            {
                "$set": {
                    {"Loses": "Loses" + 1}
                }
            })
            for doc in collection.find({"User": user}):
                btime = doc["Best Time"]
                time_sec = doc["Best Time Seconds"]
        
            end = '<div>\n<h2> Game Over! </h2>\n<h3>Time Taken: '+str(time_taken)+'</h3>\n<h3>Best Time: '+btime+'</h3>\n<button class = "btn btn-success btn-lg end"><b>Play Again</b></button></div>'
        else:
            end = '<div>\n<h2> Game Over! </h2>\n<h3>Time Taken: '+str(time_taken)+'</h3>\n<form action = "/game-restart">\n<button class = "btn btn-success btn-lg end"><b>Play Again</b></button>\n</form></div>'
    return end
    
@app.route('/continue')
def continued():
    continued = "Continue to End Screen"
    return continued

@app.route("/bomb_num", methods = ['GET', 'POST'])
def bombNum():
    global flagNum
    flagNum = 0
    if flagNum == 0:
        for x in range(len(bombLayout)):
            for y in range(len(bombLayout[x])):
                if bombLayout[x][y] == -1:
                    flagNum += 1
        returned = "<b>Flags Left: " + str(flagNum) + " &#128681;</b>"
    return returned
 
@app.route('/minus_flag')
def minusFlag():
    global flagNum
    flagNum -= 1
    returned = "<b>Flags Left: " + str(flagNum) + " &#128681;</b>"
    return returned
    
@app.route('/plus_flag')
def plusFlag():
    global flagNum
    flagNum += 1
    returned = "<b>Flags Left: " + str(flagNum) + " &#128681;</b>"
    return returned

#redirect to GitHub's OAuth page and confirm callback URL
@app.route('/login')
def login():   
    return github.authorize(callback=url_for('authorized', _external=True, _scheme='http')) #callback URL must match the pre-configured callback URL

@app.route('/logout')
def logout():
    session.clear()
    flash('You were logged out.')
    return redirect('/')

@app.route('/login/authorized')
def authorized():
    resp = github.authorized_response()
    if resp is None:
        session.clear()
        flash('Access denied: reason=' + request.args['error'] + ' error=' + request.args['error_description'] + ' full=' + pprint.pformat(request.args), 'error')      
    else:
        try:
            session['github_token'] = (resp['access_token'], '') #save the token to prove that the user logged in
            session['user_data']=github.get('user').data
            user = session['user_data']['login']
            #pprint.pprint(vars(github['/email']))
            #pprint.pprint(vars(github['api/2/accounts/profile/']))
            mydoc = collection.find_one({'User': user})
            if mydoc == None:
                doc = {"User": user, "Best Time": "100:00:00", "Best Time Seconds": 1000000000, "Wins": 0, "Loses": 0, "Achievements": ['Signed Up!']}
                collection.insert_one(doc)
            else:
                print('user already signed up')
            flash('You were successfully logged in as ' + user + '.')
        except Exception as inst:
            session.clear()
            print(inst)
            flash('Unable to login, please try again.', 'error')
    return redirect('/')


@app.route('/profile')
def renderProfile():
    if 'user_data' in session:
        pfp = session['user_data']['avatar_url']
        user = session['user_data']['login']
        alt = user + "'s profile picture"
        for doc in collection.find({"User": user}):
            time = doc["Best Time"]
            wins = doc["Wins"]
            loses = doc["Loses"]
            achieve = doc["Achievements"]
        if time == "100:00:00":
            time = "None"
    return render_template('profile.html', pfp = pfp, alt = str(alt), user = user, time = time, wins = wins, loses = loses, achieve = achieve)

@app.route('/game')
def renderGame():
    global gameHtml
    global bombLayout
    global numLayout
    global start_time
    
    start_time = time.time()
    
    gameHtml = ""
    bombLayout = generate_bomb_layout()
    numLayout = bombLayout
    #numLayout = generate_numbers()
    gameHtml = create_layout(numLayout)
    print(gameHtml)
    return render_template('game.html', game = gameHtml)

#the tokengetter is automatically called to check who is logged in.
@github.tokengetter
def get_github_oauth_token():
    return session['github_token']


    
if __name__ == '__main__':
    app.run()
